<#import "functions.template" as fn>
<#include "functions.template">

package ${package};

<#assign timeNow = .now>

import org.springframework.stereotype.Service;
import org.apache.commons.collections.FastHashMap;
import java.lang.reflect.Method;
import java.util.Collections;
import java.util.Map;

/**
* Automatically generated JPA -> DTO conversion service.
*
* @package ${package}
* @date ${timeNow?iso_utc}
*/
public class ${className} {

    <#if entities?size == 0>
        /**
        * NO CONVERSION METHODS DEFINED
        **/
    <#else>
        <#list entities as entity>
            <#if !entity.isAbstract>
                <#include "ConversionService.Method.template">
            </#if>
        </#list>
    </#if>

    public java.util.List<Object> convertToDtoList( java.util.Collection<Object> records ) {
        if ( records == null ) {
            throw new IllegalArgumentException("<null>");
        }

        java.util.List<Object> result = new java.util.ArrayList<Object>();
        for ( Object record : records ) {
            if ( record == null ) {
                continue;
            }

            result.add( convertToDto(record) );
        }

        return result;
    }

    public <T> T convertToDto( Object record ) {
        if ( record == null ) {
            return null;
        }

        if ( record instanceof java.util.Collection ) {
            return (T) convertToDtoList( (java.util.Collection) record );
        }

        Method conversionMethod = METHODS.get(record.getClass());
        if ( conversionMethod == null ) {
            throw new IllegalStateException("Conversion method not found: " + record.getClass().getCanonicalName() );
        }

        try {
           return (T) conversionMethod.invoke(this, new Object[] { record } );
        } catch ( Exception e ) {
           throw new IllegalStateException( e.getMessage(), e );
        }
     }

     private static final Map<Class<?>, Method> METHODS = Collections.synchronizedMap(new FastHashMap());

     static {
         for ( Method method : ${className}.class.getMethods() ) {
             if ( !method.getName().equals("convertToDto") ) {
                 continue;
             }

             if ( method.getParameterTypes().length == 0 || method.getParameterTypes()[0].equals(Object.class) ) {
                 continue;
             }

             METHODS.put( method.getParameterTypes()[0], method );
         }
     }
}
